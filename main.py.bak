# main.py

import os
import tempfile
from dotenv import load_dotenv
from langchain.llms import OpenAI
from langchain.llm_chain import LLMChain
from langchain.prompt_template import PromptTemplate

from config import WHITE, GREEN, RESET_COLOR, model_name
from utils import format_user_question
from file_processing import clone_github_repo, load_and_index_files
from questions import ask_question, QuestionContext

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


def generate_prompt_template(repo_name, github_url, conversation_history, question, numbered_documents, file_type_counts, filenames):
    """
    Generates the prompt template for asking a question.
    """
    template = """
    Repo: {repo_name} ({github_url}) | Conv: {conversation_history} | Docs: {numbered_documents} | Q: {question} | FileCount: {file_type_counts} | FileNames: {filenames}
    Instr:
    1. Answer based on context/docs.
    2. Focus on repo/code.
    3. Consider:
      a. Purpose/features - describe.
      b. Functions/code - provide details/samples.
      c. Setup/usage - give instructions.
    4. Unsure? Say "I am not sure".
    Answer:
    """

    prompt = PromptTemplate(
        template=template,
        input_variables=["repo_name", "github_url", "conversation_history", "question", "numbered_documents", "file_type_counts", "filenames"]
    )

    return prompt


def clone_and_index_repository(github_url):
    """
    Clone and index the repository.
    """
    with tempfile.TemporaryDirectory() as local_path:
        if clone_github_repo(github_url, local_path):
            index, documents, file_type_counts, filenames = load_and_index_files(local_path)
            return index, documents, file_type_counts, filenames
        else:
            return None, None, None, None


def ask_question_about_repository(user_question, question_context):
    """
    Ask a question about the repository and display the answer.
    """
    user_question = format_user_question(user_question)
    answer = ask_question(user_question, question_context)
    return answer


def display_answer(answer):
    """
    Display the answer to the user.
    """
    print(GREEN + '\nANSWER\n' + answer + RESET_COLOR + '\n')


def main():
    """
    The main entry point of the program.
    """
    github_url = input("Enter the GitHub URL of the repository: ")
    repo_name = os.path.basename(github_url)

    print("Cloning the repository...")
    index, documents, file_type_counts, filenames = clone_and_index_repository(github_url)
    
    if index is None or not documents:
        print("No documents were found to index. Exiting.")
        exit()

    print("Repository cloned. Indexing files...")
    llm = OpenAI(api_key=OPENAI_API_KEY, temperature=0.2)

    prompt = generate_prompt_template(repo_name, github_url, "", "", len(documents), file_type_counts, filenames)
    llm_chain = LLMChain(prompt=prompt, llm=llm)

    conversation_history = ""
    while True:
        try:
            user_question = input("\n" + WHITE + "Ask a question about the repository (type 'exit()' to quit): " + RESET_COLOR)
            if user_question.lower() == "exit()":
                break
            else:
                print('Thinking...')
                question_context = QuestionContext(index, documents, llm_chain, model_name, repo_name, github_url, conversation_history, file_type_counts, filenames)
                answer = ask_question_about_repository(user_question, question_context)
                display_answer(answer)
                conversation_history += f"Question: {user_question}\nAnswer: {answer}\n"
        
        except Exception as e:
            print(f"An error occurred: {e}")
            break


if __name__ == "__main__":
    main()